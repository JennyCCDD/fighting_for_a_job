# -*- coding: utf-8 -*-
"""
@author: Mengxuan Chen
@description:
    有效的数独

    # 数字 1-9 在每一行只能出现一次。
    # 数字 1-9 在每一列只能出现一次。
    # 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
@revise log:
    2021.01.09 创建程序
                解题思路：
"""
import numpy as np
class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        board_arr = np.array(board)
        x = 0
        for i in range(len(board)):
            if len(set(board_arr[i])) < len(board_arr[i]):
                if len(set(board_arr.T[i])) < len(board_arr.T[i]):
                    for i3 in range(0,9,3):
                        for j3 in range(0,9,3):
                            if len(np.unique(board_arr[i3:int(i3+3),j3:int(j3+3)])) \
                                    <= 2 * len(board_arr[i3:int(i3+3),j3:int(j3+3)]):
                                x = 1
        return bool(x)


solution = Solution()
result = solution.isValidSudoku([
["8","3",".",".","7",".",".",".","."],
["6",".",".","1","9","5",".",".","."],
[".","9","8",".",".",".",".","6","."],
["8",".",".",".","6",".",".",".","3"],
["4",".",".","8",".","3",".",".","1"],
["7",".",".",".","2",".",".",".","6"],
[".","6",".",".",".",".","2","8","."],
[".",".",".","4","1","9",".",".","5"],
[".",".",".",".","8",".",".","7","9"]
])

# [["8","3",".",".","7",".",".",".","."],
# ["6",".",".","1","9","5",".",".","."],
# [".","9","8",".",".",".",".","6","."],
# ["8",".",".",".","6",".",".",".","3"],
# ["4",".",".","8",".","3",".",".","1"],
# ["7",".",".",".","2",".",".",".","6"],
# [".","6",".",".",".",".","2","8","."],
# [".",".",".","4","1","9",".",".","5"],
# [".",".",".",".","8",".",".","7","9"]]

# 输入:
# [
#   ["5","3",".",".","7",".",".",".","."],
#   ["6",".",".","1","9","5",".",".","."],
#   [".","9","8",".",".",".",".","6","."],
#   ["8",".",".",".","6",".",".",".","3"],
#   ["4",".",".","8",".","3",".",".","1"],
#   ["7",".",".",".","2",".",".",".","6"],
#   [".","6",".",".",".",".","2","8","."],
#   [".",".",".","4","1","9",".",".","5"],
#   [".",".",".",".","8",".",".","7","9"]
# ]
# 输出: true
#                             # list_33 = (board_arr[i3:int(i3+3),j3:int(j3+3)]).tolist()
#                             # set_33 = set()
#                             # for k in range(len(list_33)):
#                             #     set_33.add(set(list_33[k]))
#                             # if len(set_33) \
#                             #         <= 2 * len(board_arr[i3:int(i3+3),j3:int(j3+3)]):
print(result)